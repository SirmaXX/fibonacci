* 1. Ders
** Functional programming vs imperative programming
*** Fibonacci implementation with functional programming

#+BEGIN_SRC go
package main

import "fmt"

func fibo(elemanlar []int, limit int) []int {
  if len(elemanlar) > limit {
    return elemanlar
  } else if len(elemanlar) < 2 {
    return fibo(append(elemanlar, 0+1), limit)
  } else {
    return fibo(append(elemanlar,
      elemanlar[len(elemanlar)-2]+elemanlar[len(elemanlar)-1]),
      limit)
  }
}

func main() {
  var elemanlar []int

  fmt.Println(fibo(elemanlar, 500))
}
#+END_SRC

*** Fibonacci implementation with imperative programming
#+BEGIN_SRC go
package main

import "fmt"

func fibo(index int, elemanlar []int) []int{
  a,b:=1,1
  i:=2
  elemanlar=append(elemanlar,a);
  for ;i<index;i++ {
    elemanlar=append(elemanlar,b);
    temp:=a+b
    a=b
    b=temp
  }
  elemanlar=append(elemanlar,b);
  return elemanlar
}

func main() {
  var elemanlar []int
  fmt.Println(fibo(500,elemanlar))
}

#+END_SRC
